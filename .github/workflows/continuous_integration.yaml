# Cloud Run deploy after: https://medium.com/google-cloud/how-to-deploy-your-cloud-run-service-using-github-actions-e5b6a6f597a3
# Gradle cache https://tomgregory.com/build-gradle-projects-with-github-actions/
# Gradle cache cleanup https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  common:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: temurin

      - name: Add execute access to maven wrapper
        run: chmod 755 gradlew

      - name: Build and test
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: build --info --stacktrace

      - name: Cache build artifacts for subsequent jobs
        uses: actions/upload-artifact@v2
        with:
          name: build-dir
          path: |
            **/build
          retention-days: 1

  quarkus:
    needs: common
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore build directory
        uses: actions/download-artifact@v2
        with:
          name: build-dir
          path: ./

      - name: Add execute access to maven wrapper
        run: chmod 755 gradlew

      - name: Build quarkus native
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: build -Dquarkus.package.type=native -Dquarkus.native.container-build=true

      - name: Create Quarkus native image
        run: docker build -f quarkus-app/src/main/docker/Dockerfile.native -t lukaszjozwiak/quarkus-app:native quarkus-app

      - name: Create Quarkus jvm image
        run: docker build -f quarkus-app/src/main/docker/Dockerfile.jvm -t lukaszjozwiak/quarkus-app:jvm quarkus-app

      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/master'
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        if: github.ref == 'refs/heads/master'
        run: |
          gcloud auth configure-docker

      - name: Deploy Quarkus Jvm App
        if: github.ref == 'refs/heads/master'
        run: |
          docker image tag lukaszjozwiak/quarkus-app:jvm eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:jvm
          docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:jvm
          gcloud run deploy quarkus-app-jvm \
          --region europe-central2 \
          --image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:jvm \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --set-env-vars "QUARKUS_MONGODB_CONNECTION_STRING=${{ secrets.MONGO_URL }}"

        # Mongo URL requires to be in old format https://github.com/quarkusio/quarkus/issues/7986
        # Escape commas in Mongo URL https://ahmet.im/blog/mastering-cloud-run-environment-variables/
      - name: Deploy Quarkus Native App
        if: github.ref == 'refs/heads/master'
        run: |
          docker image tag lukaszjozwiak/quarkus-app:native eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:native
          docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:native
          gcloud run deploy quarkus-app-native \
          --region europe-central2 \
          --image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/quarkus-app:native \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --set-env-vars "^##^QUARKUS_MONGODB_CONNECTION_STRING=${{ secrets.MONGO_URL_OLD }}"

  micronaut:
    needs: common
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore build directory
        uses: actions/download-artifact@v2
        with:
          name: build-dir
          path: ./

      - name: Add execute access to maven wrapper
        run: chmod 755 gradlew

      - name: Build micronaut native
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: micronaut-app:dockerBuildNative

      - name: Create Micronaut native image
        run: docker image tag micronaut-app:latest lukaszjozwiak/micronaut-app:native

      - name: Create Micronaut jvm image
        run: docker build -f micronaut-app/src/main/docker/Dockerfile.jvm -t lukaszjozwiak/micronaut-app:jvm micronaut-app

      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/master'
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        if: github.ref == 'refs/heads/master'
        run: |
          gcloud auth configure-docker

      - name: Deploy Micronaut Jvm App
        if: github.ref == 'refs/heads/master'
        run: |
          docker image tag lukaszjozwiak/micronaut-app:jvm eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:jvm
          docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:jvm
          gcloud run deploy micronaut-app-jvm \
          --region europe-central2 \
          --image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:jvm \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --set-env-vars "MONGODB_URI=${{ secrets.MONGO_URL }}"

      - name: Deploy Micronaut Native App
        if: github.ref == 'refs/heads/master'
        run: |
          docker image tag lukaszjozwiak/micronaut-app:native eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:native
          docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:native
          gcloud run deploy micronaut-app-native \
          --region europe-central2 \
          --image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/micronaut-app:native \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --set-env-vars "MONGODB_URI=${{ secrets.MONGO_URL }}"


  springboot:
    needs: common
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore build directory
        uses: actions/download-artifact@v2
        with:
          name: build-dir
          path: ./

      - name: Add execute access to maven wrapper
        run: chmod 755 gradlew

      - name: Create SpringBoot jvm image
        run: docker build -f springboot-app/src/main/docker/Dockerfile.jvm -t lukaszjozwiak/springboot-app:jvm springboot-app

      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/master'
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        if: github.ref == 'refs/heads/master'
        run: |
          gcloud auth configure-docker

      - name: Deploy SpringBoot Jvm App
        if: github.ref == 'refs/heads/master'
        run: |
          docker image tag lukaszjozwiak/springboot-app:jvm eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/springboot-app:jvm
          docker push eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/springboot-app:jvm
          gcloud run deploy springboot-app-jvm \
          --region europe-central2 \
          --image eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/springboot-app:jvm \
          --platform managed \
          --allow-unauthenticated \
          --project ${{ secrets.GCP_PROJECT_ID }} \
          --set-env-vars "SPRING_DATA_MONGODB_URI=${{ secrets.MONGO_URL }}"

  e2e:
    needs:
      - quarkus
      - micronaut
      - springboot
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add execute access to maven wrapper
        run: chmod 755 gradlew

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Download list of services
        run: gcloud run services list --format="value(URL)" > 'e2e-tests/services.txt'

      - name: Run e2e tests
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper
          arguments: -Pe2e.tests.enabled e2e-tests:check --info --stacktrace
